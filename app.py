from keys import *
from telebot import *
from config import TOKEN
from convertator import ConvertatorFull, ConvertatorRate, ConversionExc

bot = telebot.TeleBot(TOKEN)

ans1 = []
ans2 = []


@bot.message_handler(commands=['start'])
def start(message):
    mess = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\n\n" \
        f"–Ø –±–æ—Ç, —É–º–µ—é—â–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã:\n" \
        f"\n –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n" \
        f"/doit - –º–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª" \
        f"\n/values - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç\n" \
        f"/help - –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ"
    bot.send_message(message.chat.id, mess, reply_markup=DelKeyboard)


@bot.message_handler(commands=['help'])
def help(message):
    mess = f"–Ø –±–æ—Ç, —É–º–µ—é—â–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã:\n\n" \
           f"–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Å—É–º–º—É –≤ –≤–∞–ª—é—Ç–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–∫—É)\n" \
           f"(–ü—Ä–∏–º–µ—Ä: 1000.5)\n\n" \
           f"–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n" \
           f"/doit - –º–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª" \
           f"\n/values - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç\n" \
           f"\n\nTelegram Bot for convertation v0.1 by @Caramba"
    bot.send_message(message.chat.id, mess, reply_markup=DelKeyboard)


@bot.message_handler(commands=['values'])
def values(message):
    mess = f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç:\n" \
           f"\n{coin1} - –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å –≤ —Ä—É–±–ª—è—Ö –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã\n" \
           f"{coin2} - –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å –≤ —Ä—É–±–ª—è—Ö –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã\n" \
           f"{coin3} - –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤ –∫—É—Ä—Å –≤ —Ä—É–±–ª—è—Ö –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã\n" \
           f"\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–∞–ø—Ä—è–º—É—é üá∑üá∫ —Ä—É–±–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —è –Ω–µ —É–º–µ—é," \
           f" –Ω–æ –º–æ–≥—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã –≤ —Ä—É–±–ª–∏."
    bot.send_message(message.chat.id, mess, reply_markup=DelKeyboard)


@bot.message_handler(commands=['doit'])
def doit(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton(startbut1)
    item2 = types.KeyboardButton(startbut2)
    markup.add(item1, item2)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å: ', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def step1(message):
    if message.text == startbut1:
        markup = types.InlineKeyboardMarkup(row_width=1)
        item1 = types.InlineKeyboardButton(text=coin1, callback_data=coin1)
        item2 = types.InlineKeyboardButton(text=coin2, callback_data=coin2)
        item3 = types.InlineKeyboardButton(text=coin3, callback_data=coin3)
        markup.add(item1, item2, item3)
        bot.send_message(message.chat.id, f'{startbut1}:', reply_markup=markup)

    elif message.text == startbut2:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton(coin1)
        item2 = types.KeyboardButton(coin2)
        item3 = types.KeyboardButton(coin3)
        markup.add(item1, item2, item3)
        msg = bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', reply_markup=markup)
        bot.register_next_step_handler(msg, step2)
    else:
        bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é.\n'
                                          '–í—ã–±–µ—Ä–∏—Ç–µ /help - —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è —É–º–µ—é.', reply_markup=DelKeyboard)


def step2(message):
    ans1.append(message.text)
    if message.text == coin1:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton(usd1)
        item2 = types.KeyboardButton(usd2)
        item3 = types.KeyboardButton(usd3)
        markup.add(item1, item2, item3)
        msg = bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:', reply_markup=markup)
        bot.register_next_step_handler(msg, step3)

    elif message.text == coin2:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton(eur1)
        item2 = types.KeyboardButton(eur2)
        item3 = types.KeyboardButton(eur3)
        markup.add(item1, item2, item3)
        msg = bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:', reply_markup=markup)
        bot.register_next_step_handler(msg, step3)

    elif message.text == coin3:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton(gel1)
        item2 = types.KeyboardButton(gel2)
        item3 = types.KeyboardButton(gel3)
        markup.add(item1, item2, item3)
        msg = bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:', reply_markup=markup)
        bot.register_next_step_handler(msg, step3)

    else:
        bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö\n'
                                          f'–í—ã–±–µ—Ä–∏—Ç–µ /doit - —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.', reply_markup=DelKeyboard)
        ans1.pop()


def step3(message):
    ans2.append(message.text)
    msg = bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ', reply_markup=DelKeyboard)
    bot.register_next_step_handler(msg, step4)


def step4(message):
    try:
        amount = message.text.replace(' ', '')
        quote = "".join(ans1)
        base = "".join(ans2)

        total = ConvertatorFull.get_price(amount, quote, base)
        text = f'{amount}{quote} üëâ {base}\n\n{total}'

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton(next)
        item2 = types.KeyboardButton(end)
        markup.add(item1, item2)
        msg = bot.send_message(message.chat.id, text, reply_markup=markup)

        ans1.pop()
        ans2.pop()
    except ConversionExc as e:
        bot.send_message(message.chat.id, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ =(\n{e}')
        ans1.pop()
        ans2.pop()

    except Exception as e:
        bot.send_message(message.chat.id, f'–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É =(\n{e}')
        ans1.pop()
        ans2.pop()
    else:
        bot.register_next_step_handler(msg, step5)


def step5(message):
    if message.text == next:
        bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:\n\n'
                                          f'/doit - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n'
                                          f'/values - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç\n'
                                          f'/help - –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ', reply_markup=DelKeyboard)
    elif message.text == end:
        bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, —è –±—É–¥—É —Å–∫—É—á–∞—Ç—å!', reply_markup=DelKeyboard)


@bot.callback_query_handler(func=lambda callback: callback.data)
def step_rate(callback):
    quote = callback.data
    text = ConvertatorRate.get_rate(quote)
    bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=f'{quote} = {text} —Ä—É–±–ª–µ–π', reply_markup=None)


bot.polling(non_stop=True)
